var card = require("cards");
var logger = require("logger");

Array.prototype.remove = function(from, to) {
        var rest = this.slice((to || from) + 1 || this.length);
        this.length = from < 0 ? this.length + from : from;
        return this.push.apply(this, rest);
      };

module.exports = {
  Player: function(socket) {
    this.isTurning = false;
    this.id = guid();
    this.mana = 0;
    this.socket = socket;
    this.maxMana = 1;
    this.Hand = [];
    this.dropped = [];
    
    this.haveTauntCard = function() {
      for (var i = 0; i < this.dropped.length; i++)
        if (this.dropped[i].talentName == "taunt")
          return true;
      return false;
    }
    this.findCard = function(guid){
        for(var i = 0; i < this.Hand.length; i++)
        {
          if (this.Hand[i].id == guid) return this.Hand[i];
        }
        return undefined;
    };
    this.getState = function () {
      var model = {};
      model.Hand = this.Hand;
      model.id = this.id;
      model.mana = this.mana;
      model.maxMana = this.maxMana;
      return model;
    };
    this.updateHand = function() {
      for(var i = 0; i < this.Hand.length; i++)
        if (this.Hand[i].hp <= 0 && this.Hand[i].dropped)
          {
            this.Hand.remove(i);
            break;
          }
      for(i = 0; i < this.dropped.length; i++)
        if (this.dropped[i].hp <= 0)
          {
            this.dropped.remove(i);
            break;
          }
    };
    this.sendState = function() {
      this.updateHand();
      this.socket.emit("update-player-state", this.getState());
    };
    this.addCard = function(card) {
      this.Hand.push(card);
      this.socket.emit("new-card", card);
      return card;
    };
    this.findCard = function(guid){
        for(var i = 0; i < this.Hand.length; i++)
        {
          if (this.Hand[i].id == guid) return this.Hand[i];
        }
        return undefined;
    };
    this.dropCard = function(id) {
      var foundedCard = this.findCard(id);
      var canBeDropped = ((foundedCard != undefined) && ((foundedCard.cost <= this.mana) && this.isTurning)) || (foundedCard.name == "Hero");
      this.socket.emit("card-drop-result", {guid: id, response: canBeDropped});
      if (canBeDropped) 
      {
        this.mana -= foundedCard.cost;
        foundedCard.dropped = true;
        foundedCard.canAttack = (foundedCard.talentName == "charge")
        if (foundedCard.talentName == "new-card")
          this.addCard(card.CardFactory.getRandomFromArray());
        else if (foundedCard.talentName == "new-card-2")
        {
          this.addCard(card.CardFactory.getRandomFromArray());
          this.addCard(card.CardFactory.getRandomFromArray());
        }
        else if (foundedCard.talentName == "new-card-4")
        {
          this.addCard(card.CardFactory.getRandomFromArray());
          this.addCard(card.CardFactory.getRandomFromArray());
          this.addCard(card.CardFactory.getRandomFromArray());
          this.addCard(card.CardFactory.getRandomFromArray());
        }
        this.dropped.push(foundedCard);
      }
      this.sendState();
      return canBeDropped;
    };
    this.endTurn = function() {
      this.isTurning = false;
      if (this.maxMana < 10)
        this.maxMana++;
      this.mana = this.maxMana;
      for(var i = 0; i < this.dropped.length; i++)
      {
        this.dropped[i].canAttack = true;
      }
      this.socket.emit("end-turn-succes");
      this.sendState();
    };
    this.startTurn = function(addCard) {
      addCard = addCard || false;
      if (addCard) this.addCard(card.CardFactory.getRandomFromArray());
      this.isTurning = true;
      this.sendState();
      this.socket.emit("start-turn");
    };
  }, 
  Session: function (){
    this.id = guid();
    this.players = [];
    this.turnOwner = 0;
    this.isFree = function () {
      return this.players.length < 2;
    };
    this.addPlayer = function(player) {
      if (this.players.length < 2) 
      {
        this.players.push(player);
        logger.log("session #"+this.id+", player #"+this.players[this.players.length-1].id+" connected and waiting for partner");
      }
      if (this.players.length == 2)
      {
        this.players[0].startTurn();
        this.players[0].addCard(card.CardFactory.getRandomFromArray());
        this.players[0].addCard(card.CardFactory.getRandomFromArray());
        this.players[0].addCard(card.CardFactory.getRandomFromArray());
        this.players[0].addCard(card.CardFactory.getRandomFromArray());
        this.players[0].addCard(card.CardFactory.getHero(this.players[0]));

        this.players[1].addCard(card.CardFactory.getRandomFromArray());
        this.players[1].addCard(card.CardFactory.getRandomFromArray());
        this.players[1].addCard(card.CardFactory.getRandomFromArray());
        this.players[1].addCard(card.CardFactory.getRandomFromArray());
        this.players[1].addCard(card.CardFactory.getCoin(this.players[1]));
        this.players[1].addCard(card.CardFactory.getHero(this.players[1]));
        this.broadcast("start");
        logger.log("session #"+this.id+", game strted");
      }
      return player;
    };
    this.endTurn = function() {
      this.players[this.turnOwner].endTurn();
      if (this.turnOwner == 0) this.turnOwner = 1;
      else this.turnOwner = 0;
      this.players[this.turnOwner].startTurn(true);
    };
    this.dropCard = function (cardModel, playerId) {
      if (this.players[0].id == playerId) this.players[1].socket.emit("enemy-drop", cardModel);
      else this.players[0].socket.emit("enemy-drop", cardModel);
    };
    this.havePlayer = function(id) {
      return this.players[0].id == id || this.players[1].id == id;
    };
    this.findPlayerWithCard = function (id) {
      if (this.players[0].findCard(id) != undefined) 
        return this.players[0];
      if (this.players[1].findCard(id) != undefined) 
        return this.players[1];
      return undefined;
    };
    this.beatCard = function(attackedCard, attackerCard, attacked, attacker) {
      if (attacked.haveTauntCard() && attackedCard.talentName != "taunt")
      {
        attacker.socket.emit("attack-failed", "tauntMustBeTarget");
        return;
      }
      if (attackerCard.canAttack)
      {
        if (attackedCard.talentName == "holy-shield" && attackerCard.power > 0)
          attackedCard.talentName = "holy-shield-broken";
        else attackedCard.hp -= attackerCard.power;
        if (attackerCard.talentName == "holy-shield" && attackedCard.power > 0)
          attackerCard.talentName = "holy-shield-broken";
        else attackerCard.hp -= attackedCard.power;
        
        if (attackedCard.hp <= 0 && attackedCard.name == "Hero")
        {
          attacked.socket.emit("lose");
          attacker.socket.emit("win");
        }
        
        attacker.sendState();
        attacked.sendState();
        
        attackerCard.canAttack = false;
      }

      this.broadcast("update-card-state", attackedCard.getState());
      this.broadcast("update-card-state", attackerCard.getState());
      attacker.socket.emit("attack-success");
    };
    this.broadcast = function(event, data) {
      this.players[0].socket.emit(event, data);
      this.players[1].socket.emit(event, data);
    };
    this.close = function(initator) {
      if (this.players[1] == initator) this.players[0].socket.emit("win");
      else if (this.players[1] != undefined) this.players[1].socket.emit("win");
      this.players = null;
    };
    
    logger.log("session #"+this.id+" opened");
  }
};

function guid() {
  function s4() {
    return Math.floor((1 + Math.random()) * 0x10000)
      .toString(16)
      .substring(1);
  }
  return s4() + s4() + '-' + s4() + '-' + s4() + '-' +
    s4() + '-' + s4() + s4() + s4();
}